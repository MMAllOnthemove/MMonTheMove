import Navbar from "../../../components/Navbar";
// Next auth session hook
import {
  ArrowDownTrayIcon,
  ArrowPathIcon,
  ArrowUpTrayIcon,
  UserGroupIcon,
} from "@heroicons/react/24/outline";
import {
  BadgeDelta,
  BarChart,
  Card,
  Metric,
  Tab,
  TabGroup,
  TabList,
  TabPanel,
  TabPanels,
  Text,
  Title,
} from "@tremor/react";
import { useSession } from "next-auth/react";
import Head from "next/head";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";

export default function Dashboard() {
  // Google auth session
  const { data: session } = useSession();
  // console.log("Repo", repo);

  const [completeCountToday, setCompleteCountToday] = useState("");
  const [completeCount, setCompleteCount] = useState("");
  const [pendingCountToday, setPendingCountToday] = useState("");
  const [pendingCount, setPendingCount] = useState("");
  const [unitsInCountToday, setUnitsInCountToday] = useState("");
  const [unitsInCount, setUnitsInCount] = useState("");

  // Graph
  const [barGraphDataToday, setBarGraphDataToday] = useState<
    string[] | number[] | any[]
  >([]);
  const [barGraphDataMonth, setBarGraphDataMonth] = useState<
    string[] | number[] | any[]
  >([]);
  const [barGraphDataAllTime, setBarGraphDataAllTime] = useState<
    string[] | number[] | any[]
  >([]);

  useEffect(() => {
    // Stats
    dashboardCountUnitsInToday();
    dashboardCountUnitsIn();
    dashboardCountUnitsPendingToday();
    dashboardCountUnitsPending();
    dashboardCountUnitsCompleteToday();
    dashboardCountUnitsComplete();

    // Graphs
    todaysJobsDashboardGraph();
    monthlyJobsDashboardGraph();
    alltimeJobsDashboardGraph();
  }, [
    unitsInCountToday,
    unitsInCount,
    pendingCountToday,
    pendingCount,
    completeCount,
    completeCountToday,
    barGraphDataToday,
    barGraphDataMonth,
    barGraphDataAllTime,
  ]);

  async function dashboardCountUnitsInToday() {
    await fetch(
      `${process.env.NEXT_PUBLIC_SERVER_API_URL_DASHBOARD_UNITS_COUNT}/in/today`,
      {
        cache: "default",
        next: { revalidate: 2 },
      }
    )
      .then((res) => res.json())
      .then((data) => setUnitsInCountToday(data.units_in_today))
      .catch((e) => console.log("Dashboard units in today error", e));
  }
  async function dashboardCountUnitsIn() {
    await fetch(
      `${process.env.NEXT_PUBLIC_SERVER_API_URL_DASHBOARD_UNITS_COUNT}/in`,
      {
        cache: "default",
        next: { revalidate: 2 },
      }
    )
      .then((res) => res.json())
      .then((data) => setUnitsInCount(data.units_in))
      .catch((e) => console.log("Dashboard units in error", e));
  }

  async function dashboardCountUnitsPendingToday() {
    await fetch(
      `${process.env.NEXT_PUBLIC_SERVER_API_URL_DASHBOARD_UNITS_COUNT}/pending/today`,
      {
        cache: "default",
        next: { revalidate: 2 },
      }
    )
      .then((res) => res.json())
      .then((data) => setPendingCountToday(data.pending_today))
      .catch((e) => console.log("Dashboard units pending today error", e));
  }
  async function dashboardCountUnitsPending() {
    await fetch(
      `${process.env.NEXT_PUBLIC_SERVER_API_URL_DASHBOARD_UNITS_COUNT}/pending`,
      {
        cache: "default",
        next: { revalidate: 2 },
      }
    )
      .then((res) => res.json())
      .then((data) => setPendingCount(data.pending))
      .catch((e) => console.log("Dashboard units pending error", e));
  }

  async function dashboardCountUnitsComplete() {
    await fetch(
      `${process.env.NEXT_PUBLIC_SERVER_API_URL_DASHBOARD_UNITS_COUNT}/complete`,
      {
        cache: "default",
        next: { revalidate: 2 },
      }
    )
      .then((res) => res.json())
      .then((data) => setCompleteCount(data.complete))
      .catch((e) => console.log("Dashboard units complete error", e));
  }

  async function dashboardCountUnitsCompleteToday() {
    await fetch(
      `${process.env.NEXT_PUBLIC_SERVER_API_URL_DASHBOARD_UNITS_COUNT}/complete/today`,
      {
        cache: "default",
        next: { revalidate: 2 },
      }
    )
      .then((res) => res.json())
      .then((data) => setCompleteCountToday(data.complete_today))
      .catch((e) => console.log("Dashboard units complete today error", e));
  }

  // Graphs
  async function todaysJobsDashboardGraph() {
    await fetch(
      `http://localhost:8000/hhp/api/v1/engineer/jobs-count/overview/today`
    )
      .then((res) => {
        if (!res.ok) {
          throw new Error("Data not ok");
        }
        res.json();
      })
      .then((data) => {
        console.log("Today graph error", data);
        setBarGraphDataToday(data);
      })
      .catch((e) => console.log("Today graph error", e));
  }

  async function monthlyJobsDashboardGraph() {
    await fetch(
      `http://localhost:8000/hhp/api/v1/engineer/jobs-count/overview/month`
    )
      .then((res) => {
        if (!res.ok) {
          throw new Error("Data not ok");
        }
        res.json();
      })
      .then((data) => {
        console.log("Monthly graph", data);
        setBarGraphDataMonth(data);
      })
      .catch((e) => console.log("Monthly graph error", e));
  }

  async function alltimeJobsDashboardGraph() {
    await fetch(
      `http://localhost:8000/hhp/api/v1/engineer/jobs-count/overview/all-time`
    )
      .then((res) => {
        if (!res.ok) {
          throw new Error("Data not ok");
        }
        res.json();
      })
      .then((data) => {
        console.log("All-time graph", data);
        setBarGraphDataAllTime(data);
      })
      .catch((e) => console.log("All-time graph error", e));
  }

  const router = useRouter();

  if (session) {
    return (
      <>
        <Head>
          <title>Dashboard</title>
          <meta name="robots" content="noindex, nofollow"></meta>
        </Head>
        <Navbar />
        <main className="space-between-navbar-and-content">
          <section className="container max-w-6xl px-5 mx-auto pt-5 mb-28">
            <h1 className="mb-4  font-semibold font-sans leading-none tracking-tight text-gray-900 ">
              Analytics overview
            </h1>

            <div className="grid gap-7 sm:grid-cols-2 lg:grid-cols-4 my-3 ">
              <article className=" flex flex-col justify-between p-5 border border-[#eee] bg-white rounded cursor-pointer">
                <div className="first_row flex  justify-between items-center">
                  <div>
                    <Text className="text-sm text-gray-400  font-medium font-sans">
                      Units in
                    </Text>
                    <Metric className="text-xl lg:text-5xl font-bold text-indigo-500 ">
                      {unitsInCount}
                    </Metric>
                  </div>
                  <ArrowUpTrayIcon className="h-6 w-6 text-gray-500" />
                </div>
                <div className="second_row mt-3">
                  <BadgeDelta
                    deltaType="moderateIncrease"
                    isIncreasePositive={true}
                    size="md"
                  >
                    <span>Today</span> {unitsInCountToday}
                  </BadgeDelta>
                </div>
              </article>
              <article className=" flex flex-col justify-between p-5 border border-[#eee] bg-white rounded cursor-pointer">
                <div className="first_row flex  justify-between items-center">
                  <div>
                    <Text className="text-sm text-gray-400  font-medium font-sans">
                      Units pending
                    </Text>
                    <Metric className="text-xl lg:text-5xl font-bold text-indigo-500 ">
                      {pendingCount}
                    </Metric>
                  </div>
                  <ArrowPathIcon className="h-6 w-6 text-gray-500" />
                </div>
                <div className="second_row mt-3">
                  <BadgeDelta
                    deltaType="moderateIncrease"
                    isIncreasePositive={true}
                    size="md"
                  >
                    <span>Today</span> {pendingCountToday}
                  </BadgeDelta>
                </div>
              </article>
              <article className=" flex flex-col justify-between p-5 border border-[#eee] bg-white rounded cursor-pointer">
                <div className="first_row flex  justify-between items-center">
                  <div>
                    <Text className="text-sm text-gray-400  font-medium font-sans">
                      Units repair complete
                    </Text>
                    <Metric className="text-xl lg:text-5xl font-bold text-indigo-500 ">
                      {completeCount}
                    </Metric>
                  </div>
                  <ArrowDownTrayIcon className="h-6 w-6 text-gray-500" />
                </div>
                <div className="second_row mt-3">
                  <BadgeDelta
                    deltaType="moderateIncrease"
                    isIncreasePositive={true}
                    size="md"
                  >
                    <span>Today</span> {completeCountToday}
                  </BadgeDelta>
                </div>
              </article>
              <article className="flex items-center justify-between p-5 border border-[#eee] bg-white rounded cursor-pointer">
                <div>
                  <div className="text-sm text-gray-400  font-medium font-sans">
                    Engineers
                  </div>
                  <div className="flex items-center pt-1">
                    <div className="text-xl lg:text-5xl font-bold text-indigo-500 ">
                      6
                    </div>
                  </div>
                </div>
                <div>
                  <UserGroupIcon className="h-6 w-6 text-gray-500" />
                </div>
              </article>
            </div>
          </section>
          <section className="container mx-auto">
            <TabGroup>
              <TabList className="mt-8">
                <Tab>Today</Tab>
                <Tab>Month</Tab>
                <Tab>All time</Tab>
              </TabList>
              <TabPanels>
                <TabPanel>
                  <Card className="my-5">
                    <div
                      className="mt-10"
                      style={{ width: "100%", height: "100%" }}
                    >
                      <Title>Number of units added for today</Title>
                      <BarChart
                        className="mt-6"
                        data={barGraphDataToday}
                        index="engineer"
                        categories={["units"]}
                        colors={["orange"]}
                        yAxisWidth={40}
                      />
                    </div>
                  </Card>
                </TabPanel>
                <TabPanel>
                  <Card className="my-5">
                    <div
                      className="mt-10"
                      style={{ width: "100%", height: "100%" }}
                    >
                      <Title>Number of units added for month</Title>
                      <BarChart
                        className="mt-6"
                        data={barGraphDataMonth}
                        index="engineer"
                        categories={["units"]}
                        colors={["orange"]}
                        yAxisWidth={40}
                      />
                    </div>
                  </Card>
                </TabPanel>
                <TabPanel>
                  <Card className="my-5">
                    <div
                      className="mt-10"
                      style={{ width: "100%", height: "100%" }}
                    >
                      <Title>Number of units added all time</Title>
                      <BarChart
                        className="mt-6"
                        data={barGraphDataAllTime}
                        index="engineer"
                        categories={["units"]}
                        colors={["orange"]}
                        yAxisWidth={40}
                      />
                    </div>
                  </Card>
                </TabPanel>
              </TabPanels>
            </TabGroup>
          </section>
        </main>
      </>
    );
  }
}
