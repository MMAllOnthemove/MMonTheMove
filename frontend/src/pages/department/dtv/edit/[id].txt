// External imports
import { getProfile } from "@/functions/getLoggedInUserProfile";
import { Tab, TabList, TabPanel, TabPanels, Tabs } from "@chakra-ui/react";
import dynamic from "next/dynamic";
import Head from "next/head";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";

// Custom imports
const Button = dynamic(() => import("@/components/Buttons"));
const Container = dynamic(() => import("@/components/Container"));
const CreateChecklistContent = dynamic(
  () => import("@/components/DTV/CreateChecklistContent")
);
const SingleJobDetails = dynamic(
  () => import("@/components/DTV/SingleJobDetails")
);
const ViewTaskChecklist = dynamic(
  () => import("@/components/DTV/ViewTaskChecklist")
);

export default function EditTask() {
  const router = useRouter();
  const { id } = router?.query;
  const [getData, setGetData] = useState<string[] | any>([]);
  const [isJobComplete, setIsJobsComplete] = useState<boolean>(false);
  const [jobComment, setJobComment] = useState("");
  const [updatedByWho, setUpdatedByWho] = useState("");
  const [getChecklistData, setChecklistData] = useState<string[] | any>([]);
  const [getFilteredChecklistData, setFilteredChecklistData] = useState<
    string[] | any
  >([]);
  const [userData, setUserData] = useState("");
  // Fetches logged in user's data
  useEffect(() => {
    getProfile({ setUserData });
    if (!userData) router.push("/auth");
  }, [userData]);

  useEffect(() => {
    getThisJobsData();
    fetchCheckistForThisJob();
  }, [id]);
  async function getThisJobsData() {
    // Reminder to always check:
    // The computer's IP changes based on whether it's connected via LAN or WAN
    try {
      await fetch(`${process.env.NEXT_PUBLIC_BACKEND_DTV}task/get/` + id, {
        method: "GET",
        cache: "default",
      })
        .then((res) => {
          if (!res.ok) {
            throw Error("Result failed");
          }
          return res.json();
        })
        .then((data) => {
          setGetData(data);
          return data;
        });
    } catch (error) {
      // console.log(error);
    }
  }

  async function fetchCheckistForThisJob() {
    try {
      await fetch(`${process.env.NEXT_PUBLIC_BACKEND_DTV}checklist/get`, {
        method: "GET",
        cache: "default",
      })
        .then((res) => {
          return res.json();
        })
        .then((data) => {
          let filteredData = [...data].filter((x) => x.id === id);
          setChecklistData(filteredData);
          return data;
        });
    } catch (error) {
      // console.log(error);
    }
  }
  return (
    <>
      <Head>
        <title>DTV edit task</title>
      </Head>

      <main>
        <Container>
          <span className="flex items-center justify-between my-5">
            <Button
              type="button"
              onClick={() => history.back()}
              className="bg-[#082f49]   font-semibold text-white dark:text-[#eee] hover:bg-blue-800 rounded-sm text-sm p-2.5 text-center"
              text="Back"
            />

            <h1 className="text-center text-gray-900 dark:text-[#eee] font-semibold lg:text-2xl">
              About task
            </h1>

            <div />
          </span>
          <Tabs defaultIndex={0} size="md" variant="enclosed">
            <TabList>
              <Tab fontFamily="inherit" fontWeight="500" color={"#8899a6"}>
                Job Details
              </Tab>

              <Tab fontFamily="inherit" fontWeight="500" color={"#8899a6"}>
                {getChecklistData.length > 0
                  ? "View Checklist"
                  : "Create Checklist"}
              </Tab>
            </TabList>
            <TabPanels>
              <TabPanel>
                <section className="my-5">
                  <SingleJobDetails id={id} />
                </section>
              </TabPanel>
              <TabPanel>
                <section className="my-5">
                  {getChecklistData.length > 0 ? (
                    <ViewTaskChecklist pageid={id} />
                  ) : (
                    <CreateChecklistContent id={id} />
                  )}
                </section>
              </TabPanel>
            </TabPanels>
          </Tabs>
        </Container>
      </main>
    </>
  );
}
